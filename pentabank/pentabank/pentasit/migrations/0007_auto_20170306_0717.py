# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-03-06 06:17
from __future__ import unicode_literals

from django.db import migrations
from django.db import transaction

def setManyToOneInstances(modelOne, modelMany, fieldOne, fieldMany):
    """Set the many-to-one instances based on existing many-to-many"""

    # Print intro
    print("\nOne=[{}] Many=[{}]".format(modelOne.__name__, modelMany.__name__))
    # Make sure we have the ID field of One
    fieldOneId = fieldOne + "_id"
    # Now loop over the [many] side of the objects (e.g. Domain - w.r.t. Collection)
    with transaction.atomic():
        for objMany in modelMany.objects.all():
            # Get the [modelOne] instance to which this objMany belongs
            oneAll = modelOne.objects.filter(**{fieldMany : objMany})
            # Are there any hits?
            if len(oneAll) > 0:
                # Set the *FIRST* one as the target
                setattr(objMany, fieldOne, oneAll[0])
                # Print what connection we have made
                print("from: {} to: {}".format(objMany.id, oneAll[0].id))
            else:
                # Indicate that this object has NO parent
                setattr(objMany, fieldOneId, -1)
                # Print what connection we have made
                print("from: {} to: -1 (object is unused)".format(objMany.id))
            # Save this action
            objMany.save()

def forward(apps, schema_editor):
    """Copy m2m information to m21 fields"""

    # Get model 'Situation"
    Situation = apps.get_model("pentasit", "Situation")

    # Get the other models
    Word = apps.get_model("pentasit", "Word")
    NpType = apps.get_model("pentasit", "NpType")
    Node = apps.get_model("pentasit", "Node")
    Example = apps.get_model("pentasit", "Example")

    # Set the many-to-one instances from XXX to collection
    setManyToOneInstances(Situation, Example, "situation", "example")
    setManyToOneInstances(Situation, Node, "situation", "nodes")
    setManyToOneInstances(Node, Word, "node", "word")
    setManyToOneInstances(Node, NpType, "node", "npType")



class Migration(migrations.Migration):

    dependencies = [
        ('pentasit', '0006_auto_20170306_0715'),
    ]

    operations = [
        # Make sure a number of items are copied from 'SpeechCorpus' to 'Resource'
        migrations.RunPython(forward)
    ]
